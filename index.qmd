---
title: "<span class='pref'>Topological and Geometric</span>Shape Reconstruction Beyond Manifolds "
title-slide-attributes: 
  data-background-image: "drawing.png"
  data-background-opacity: "0.3"
subtitle: <green>TDA Week, Kyoto University, 2025</green>
author: "<b>Sushovan Majhi</b>, *George Washington University, DC*<br><br><i>with</i>: <green>Rafal Komendarczyk</green> & <green>Atish Mitra</green>"
fig-cap-location: bottom
format: 
    revealjs:
        theme: dark
        slide-number: true
        self-contained: true
        incremental: true
        css: style.css
        navigation-mode: vertical
bibliography: references.bib
editor: 
  render-on-save: true
html-math-method: mathml
---

# Today's Agenda
- Our motivation
- <green>Hausmann</green>'s *curious* question
- <green>Latschev</green>'s remarkable (*but* <red>qualitative</red>!) answer
- *Finite* <green>reconstruction problem</green>
- <green>Quantitative</green> Latschev's theorem
    - *abstract* manifolds
    - *Euclidean* submanifolds
- Extension to $\mathrm{CAT}(\kappa)$ Spaces
- <red>Questions</red>

# The Problem of Shape Reconstruction

## Shape of Data {.smaller}
![A sample](sample_wedge.png)

## Learn Topological and Geometric Features {.smaller}
![A Reconstruction](wedge.png)

- The <green>topology</green> is the wedge of two circles (two $1$-dimensional <red>cycles</red>)
- The <green>geometry</green> is graph-like

## <span class="green">Good</span> Shapes {.smaller}

:::{layout-ncol="2"}
![Circle](circle.png)

![Donut](torus.png){width="100%"}
:::

## <span class="red">Bad</span> Shapes {.smaller}
![Source: Daisy lane gifts](map.webp)

## A Real Application {.smaller}
![The City of Berlin](berlin.jpg)

Q: How to draw the map of the city from a noisy point-cloud of GPS locations?

## A Reconstruction of Berlin {.smaller}
![Source: mapconstruction.org](mahmuda.jpg)

## {background-iframe="https://www.smajhi.com/shape-reconstruction" background-interactive="true"}

# <red>$\mathbb M$a$\tau$hem$\alpha$t$\iota$cal</red> Formulation {background-image="drawing.png" background-opacity="0.3"}

##

- <green>**Shape**</green>: A *Shape* is modeled as a metric space $(M,d_M)$
  - <green>Riemannian manifold</green>
  - <red>metric graph</red>
  - <red>general metric *curvature* spaces</red>

- <green>**Sample**</green>: A *finite* metric space $(X,d_X)$ *close* to $M$

    - small <green>Hausdorff</green> proximity when both $M,X\subset\mathbb R^d$
    - *alternatively*, small <red>Gromov--Hausdorff</red> distance when abstract.

## Noise Model: Hausdorff Distance {.smaller background-color="white"}

```{ojs}
{
  const height = "400px";
  const container = d3.create("div").style("position", "relative");
  let svg = container
    .append("svg")
    .attr("class", "canvas")
    .style("width", "95%")
    .style("border", "1px solid #eee")
    .style("height", height);

  drawBalls(svg);

  svg.on("click", (e) => {
    const coord = d3.pointer(e);
    isA ? A.push(coord) : B.push(coord);
    drawBalls(svg);
  });
  return container.node();
}
```


```{ojs}
//| panel: sidebar
viewof scaleB = Inputs.range([0, 300], {
  step: 1,
  value: 0,
  label: tex`r`
});
viewof scaleA = Inputs.range([0, 300], {
  step: 1,
  value: 0,
  label: tex`r`
});
viewof isA = Inputs.toggle({ label: tex`X\text{ or }Y`, value: true });
viewof btn1 = Inputs.button("clear", {
  value: null,
  reduce: () => {
    A.length = 0;
    B.length = 0;
    viewof scaleA.value = 0;
    viewof scaleB.value = 0;
    viewof scaleA.dispatchEvent(new CustomEvent("input"));
    viewof scaleB.dispatchEvent(new CustomEvent("input"));
  }
});
```

```{ojs}
A = [];
B = [];
drawBalls = function (svg) {
  svg
    .selectAll(".A-ball")
    .data(A)
    .join("circle")
    .attr("class", "A-ball")
    .attr("cx", (d) => d[0])
    .attr("cy", (d) => d[1])
    .attr("r", scaleA)
    .attr("fill", "green")
    .attr("stroke", "none")
    .attr("opacity", "0.1");
  svg
    .selectAll(".B-ball")
    .data(B)
    .join("circle")
    .attr("class", "B-ball")
    .attr("cx", (d) => d[0])
    .attr("cy", (d) => d[1])
    .attr("r", scaleB)
    .attr("fill", "red")
    .attr("stroke", "none")
    .attr("opacity", "0.1");
  svg
    .selectAll(".A-vertex")
    .data(A)
    .join("circle")
    .attr("class", "A-vertex")
    .attr("cx", (d) => d[0])
    .attr("cy", (d) => d[1])
    .attr("r", "5px")
    .attr("fill", "green")
    .on("mouseover", function () {
      d3.select(this).attr("fill", "orange").attr("r", "10px");
    })
    .on("mouseout", function () {
      d3.select(this).attr("fill", "green").attr("r", "5px");
    });
  svg
    .selectAll(".B-vertex")
    .data(B)
    .join("circle")
    .attr("class", "B-vertex")
    .attr("cx", (d) => d[0])
    .attr("cy", (d) => d[1])
    .attr("r", "5px")
    .attr("fill", "red")
    .on("mouseover", function () {
      d3.select(this).attr("fill", "orange").attr("r", "10px");
    })
    .on("mouseout", function () {
      d3.select(this).attr("fill", "red").attr("r", "5px");
    });

  return svg;
}
import { slider } from "@jashkenas/inputs"
```

```{ojs}
tex`\vec{d}_H(X,Y)=${scaleB}`;
tex`\vec{d}_H(Y,X)=${scaleA}`;
tex`d_H(X,Y)=\max\{\vec{d}_H(X,Y), \vec{d}_H(Y,X)\}=\text{max\{ }${scaleA}, ${scaleB}\text{ \}}=${Math.max(scaleA, scaleB)}`;
```

## <green>Topological</green> Guarantees

Estimate *only* the <green>Betti numbers</green> of $M$ (at various dimension $k$):

- [<green>$k=0$</green>] number of connected components 
- [<green>$k=1$</green>] cycles/loops
- [<green>$k\geq2$</green>] voids, etc.

  
## <green>Topological</green> Guarantees {.smaller}

Construct a topological space $\widetilde{M}$ from $X$ to retain the topology of $M$, i.e., $M\simeq\widetilde{M}$ in some appropriate sense:

. . . 

<red>Hidden</red> shape $M$:

![](circle-1.png){fig-align="center"}

. . . 

<green>Reconstruction</green> $\widetilde{M}$:

::: {layout-ncol="3"}


![1. <green>homotopy equivalent</green>](mobius.png){width="80%"}

![2. <green>homeomorphic</green>](circle-2.png){width="100%"}

![3. <green>geometrically-close</green><br> in e.g. Hausdorff distance](circle-3.png){width="100%"}

:::

# The <green>Reconstruction</green> {background-image="drawing.png" background-opacity="0.3"}
<green>Vietoris--Rips</green>, Cech, and $\alpha$-complexes and <red>Reeb graph</green>

## The Vietoris--Rips Complex
  - a metric space $(X,d_X)$
  
  - a scale $\beta>0$ 
  
   - $R_\beta(X)$ is an abstract simplicial complex such that
   
        - $X$ is the <green>vertex set</green>
        - each <green>subset</green> $A\subset X$ of $(k+1)$ points with <green>diameter</green> at most $\beta$ is a $k$-simplex.


## {background-iframe="https://www.smajhi.com/shape-reconstruction" background-interactive="true"}

## The <green>Theme</green> of <red>My Research</red>

- Provide a <green>window</green> of *resolutions* or *scales* for the Vietoris--Rips complexes for a <green>topologically-faithful</green> reconstruction
- Design provable reconstruction algorithms particularly for <red>bad</red> shapes
- Reconstruction under different noise models, e.g. the <green>Gromov--Hausdorff</green> distance
- Probabilistic guarantees in the face  of <red>random samples</red>

# Reconstruction via <green>Vietoris--Rips Complexes</green> {background-image="drawing.png" background-opacity="0.3"}

# Gromov's Perspective on Shape Reconstruction


## The Vietoris--Rips Complexes {.smaller}

:::{.columns}

:::{.column width="40%"}
- a metric space $(X,d_X)$
  
- a scale $\beta>0$ 
  
- $\mathcal{R}_\beta(X)$ is an abstract simplicial complex
   
  - $X$ is the <green>vertex set</green>
  - each <green>subset</green> $A\subset X$ of $(k+1)$ points with <green>diameter</green> at most $\beta$ is a $k$-simplex.

:::


:::{.column  width="60%"}


```{ojs}
V = [];
{
  const height = "500px";
  const container = d3.create("div").style("position", "relative");
  let svg = container
    .append("svg")
    .attr("class", "canvas")
    .style("margin-left", "15px")
    .style("width", "90%")
    .style("height", height)
    .style("border", "0.5px solid #eee");
  
  const triangles = svg.append("g").attr("class", "triangles");
  const edges = svg.append("g").attr("class", "edges");
  const vertices = svg.append("g").attr("class", "vertices");

  // scale
  container
    .append("div")
    .style("width", "15px")
    .style("height", height)
    .style("background", "#eee")
    .style("position", "absolute")
    .style("top", "0")
    .style("bottom", "0")
    .append("div")
    .style("width", "100%")
    .style("height", scale + "px")
    .style("background", "steelblue");
  container
    .append("div")
    .style("margin-left", "12px")
    .style("width", height)
    .style("display", "inline-block")
    .style("text-align", "center")
    .style("transform", "rotate(-90deg)")
    .style("transform-origin", "top left")
    .html(tex`\beta`.outerHTML);

  drawRips(svg, sc.rips(V, scale, 2));

  svg.on("click", (e) => {
    const coord = d3.pointer(e);
    V.push(coord);
    drawRips(svg, sc.rips(V, scale, 2));
  });
  return container.node();
}
```


```{ojs}
import { slider } from "@jashkenas/inputs"
sc = require("https://cdn.jsdelivr.net/npm/@tdajs/simplicial-complex@1.2.1/dist/min.js")
```


```{ojs}
drawRips = function (svg, rips) {
  if (rips.simplices[2]) {
    svg.selectAll(".triangle")
      .data(rips.simplices[2])
      .join("path")
      .attr("class", "triangle")
      .attr("d", (d) => d3.line()(d.map((v) => V[v])))
      .attr("fill", "lightgreen")
      .attr("stroke", "none")
      .attr("opacity", "0.3");
  }
  if (rips.simplices[1]) {
    svg.selectAll(".edge")
      .data(rips.simplices[1])
      .join("path")
      .attr("class", "edge")
      .attr("d", (d) => d3.line()(d.map((v) => V[v])))
      .attr("stroke", "green").attr("stroke-width", "2");
  }

  svg.selectAll(".vertex")
    .data(V)
    .join("circle")
    .attr("class", "vertex")
    .attr("class", "vertex")
    .attr("fill", "white")
    .attr("cx", (d) => d[0])
    .attr("cy", (d) => d[1])
    .attr("r", "2px")
    .on("mouseover", function () {
      d3.select(this).attr("fill", "green").attr("r", "10px");
    })
    .on("mouseout", function () {
      d3.select(this).attr("fill", "white").attr("r", "2px");
    });
    return svg;
}
```

```{ojs}
viewof scale = Inputs.range([0, 300], {
  step: 1,
  value: 0,
  label: tex`\beta`
})
viewof btn = Inputs.button("clear", {
  value: null,
  reduce: () => { V.length = 0; viewof scale.value = 0;viewof scale.dispatchEvent(new CustomEvent("input")); }
})
```

:::

:::


## Our Motivation {background-image="drawing.png" background-opacity="0.2"}


- Understand the <green>topology</green> of $\mathcal{R}_\beta(X)$ 
- When is the homology of $\mathcal{R}_\beta(X)$ <green>finitely</green> generated?
- Alternative to the <green>Nerve Lemma</green> for Vietoris--Rips complexes
- Implications in <green>Shape Reconstruction</green>


## Hausmann's Theorem {.smaller}

:::{.callout-tip icon="false"}
## @hausmann_1995
For any closed Riemannian manifold $M$ and $0<\beta<\rho(M)$, the Vietoris--Rips complex $\mathcal{R}_\beta(M)$ is *homotopy equivalent* to $M$.
:::


::: {.columns}

::: {.column width="70%"}
- <green>Convexity Radius</green>: $\rho(M)$ is the largest (sup) radius so that <green>geodesic balls</green> are convex.
    - $\rho(S^1)=\frac{\pi}{2}$
    - $\rho(M)>0$ for a <green>compact</green> manifold
- Hausmann constructed a homotopy equivalence $T:\mathcal{R}_{\beta}(M)\to M$
- Since $M$ has finitely generated homology, so does $\mathcal{R}_{\beta}(M)$ 
- vertex set is the <red>entire</red> manifold $M$!
:::

::: {.column width="30%"}

```{ojs}
{
  const svg = d3.create('svg').attr('viewBox', [-width/2, -600, width, 1200]);

  svg
    .append('circle')
    .attr('cx', '0')
    .attr('cy', '0')
    .attr('r', 500)
    .style('fill', 'none')
    .style('stroke-width', 10)
    .style('stroke', 'lightgray');

    const arc = d3.arc()
        .innerRadius(490)
        .outerRadius(510)
        .startAngle(-rad * Math.PI * 2)
        .endAngle(rad * Math.PI * 2);

    svg.append("path")
        .attr("class", "arc")
        .attr("d", arc)
        .attr("fill", rad <= 0.25 ? "#3be57f" : "#bb473f");

    svg.append('circle')
        .attr('cx', 0)
        .attr('cy', -500)
        .attr('r', 20)
        .style('fill', '#3be57f')
        
    return svg.node();
}
viewof rad = Inputs.range([0, 0.5], {
  step: 0.01,
  value: 0,
  label: ''
})
```

:::

:::

## Finite Reconstruction Problem {.smaller}

:::{.callout-important icon="false"}
##  Hausmann's Curious Question
What about the Vietoris--Rips complex of a <green>finite</green>, dense subset $S\subset M$? 
:::

- <green>Manifold reconstruction</green> from a dense sample
- More generally, a metric space $(S,d_S)$ close to $M$ in the <red>Gromov-Hausdorff</red> distance.

. . . 

:::: {.columns}

::: {.column width="70%"}
**Gromov--Hausdorff Distance:**  

- similarity measure between ***abstract*** metric spaces $(X,d_X)$ and $(Y,d_Y)$
- Definition: $d_{GH(X,Y)}=\inf d_H^Z(f(X),g(Y))$
    - inf over metric spaces $(Z,d_Z)$ and isometries $f:X\to Z$, $g:Y\to Z$

:::

::: {.column width="30%"}
![](gh.png){fig-align="center" width="400"}
:::

:::


## Latschev's Remarkable Solution {.smaller}

::: {.callout-tip icon="false"}
## @latschev_2001
Every closed Riemannian manifold $M$ has an <green>$\epsilon_0>0$</green> such that for any $0<\beta\leq\epsilon_0$ there exists some <red>$\delta>0$</red> so that for any sample $S$:
$$
d_{GH}(S,M)\leq\delta\implies \mathcal R_\beta(S)\simeq M.
$$
:::


. . .

- the threshold <green>$\epsilon_0=\epsilon_0(M)$</green> depends solely on the *geometry* of $M$. But the theorem did not say how!

- <red>$\delta=\delta(\beta)$</red> is a function (a fraction in practice) of $\beta$.

- The result is <red>qualitative</red>
    - it's unavoidable (uses Lebesgue's number lemma)

- Nonetheless, the result provides a promising answer to Hausmann's question, and more!

## Quantitative Latschev's Theorem {.smaller}

:::{.callout-tip icon="false"}
## Metric Graph Reconstruction [*J. Appl. & Comp. Top., @Majhi2023*]
Let $(G,d_G)$ be a compact, path-connected metric graph, $(S,d_S)$ a metric space, and $\beta>0$ a number such that $$3d_{GH}(G,S)<\beta<\frac{3}{4}\rho(G).$$ 
Then, $\mathcal R_\beta(S)\simeq G$

:::

. . .

- The result is <green>quantitative</green>

  - <green>$\epsilon_0=\frac{3}{4}\rho(G)$</green>

  - <red>$\delta=\frac{1}{3}\beta$</red>

- The constants are not optimal!      
  - <green>Optimal</green> $\epsilon_0=\frac{2}{3}\rho(G)$.

## Quantitative Latschev's Theorem {.smaller}

:::{.callout-tip icon="false"}
## Riemannian Manifold Reconstruction [*SoCG'24, DCG, @MajhiLatschev*]

Let $M$ be a closed, connected Riemannian manifold. Let $(S,d_S)$ be a compact metric space and $\beta>0$ a number such that
$$
	\frac{1}{\xi}d_{GH}(M,S)<\beta<\frac{1}{1+2\xi}\min\left\{\rho(M),\frac{\pi}{4\sqrt{\kappa}}\right\}
$$ 
for some $0<\xi\leq1/14$. Then, $\mathcal R_\beta(S)\simeq M$.

:::


- $\kappa$ is an upper bound on the <green>sectional curvatures</green> of $M$

- For $\xi=\frac{1}{14}$:
  - <green>$\epsilon_0=\frac{7}{8}\min\left\{\rho(M),\frac{\pi}{4\sqrt{\kappa}}\right\}$</green>

  - <red>$\delta=\frac{\beta}{14}$</red>

## Quantitative Latschev's Theorem {.smaller}

:::{.callout-tip icon="false"}
## Euclidean Submanifold Reconstruction [@MajhiLatschev]

Let $M\subset\mathbb R^N$ be a closed, connected submanifold. Let $S\subset\mathbb R^N$ be a compact subset and $\beta>0$ a number such that
$$
	\frac{1}{\xi}d_{H}(M,S)<\beta<\frac{3(1+2\xi)(1-14\xi)}{8(1-2\xi)^2}\tau(M)
$$ for some $0<\xi<1/14$. Then, $\mathcal R_\beta(S)\simeq M$.

:::

:::{.columns}

:::{.column width="40%"}
- $\tau(M)$ is the reach of $M$

- For $\xi=\frac{1}{28}$:
  - <green>$\epsilon_0=\frac{315}{1352}\tau(M)$</green>

  - <red>$\delta=\frac{\beta}{28}$</red>

:::


:::{.column width="60%"}

![Reach](reach.png){width=100% cap-align="center"}

:::

:::

## Quantitative Latschev's Theorem Beyond Manifolds {.smaller}

- <red>Bad</red> spaces are ubiquitous in applications
  - manifolds with boundary or not a topological manifold
  - stratefied manifolds
  - Euclidean subsets with vanishing reach (due to corners)

- <red>Challenges</red> in extending Latschev's theorem
  - defining <green>convexity radius</green> and <green>sectional curvatures</green> beyond closed Riemannian manifolds?
  - extending <green>Jung's theorem</green>

. . . 

::::{.callout-tip icon="false" .nonincremental style="font-size: 0.8em"}
## Lastchev's Theorem for $\mathrm{CAT}(\kappa)$ Spaces [@2406.04259]
*Length spaces* with <green>curvature</green> bounded (above) by $\kappa\in\mathbb{R}$ in the sense of Aleksandrov 

-  Intuitively, triangles in a $\mathrm{CAT}(\kappa)$ space are "slimmer" than corresponding "model triangles" in a standard space of constant curvature $\kappa$.
:::


## Future Directions {background-image="drawing.png" background-opacity="0.3"}

- Hausmann's constant is not optimal
- Are the better constants <green>$\epsilon_0$</green> and <red>$\delta$</red> for the quantitative Latschev's theorem?
- For Euclidean shapes, <green>geometric reconstruction</green> using *Shadow Complexes* 
  - Rafal Komendarczyk & Atish Mitra


## References {background-image="drawing.png" background-opacity="0.3"}
